1(.)一个'.'就是匹配\n(换行符)以外的任何字符
 
2(*) >=0

3(?) 0|1

4（+）>=1

5（\s）
匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。
6（\S）
匹配任何非空白字符。等价于[^ \f\n\r\t\v]。



7,运行速度：
方式1：
re.match(regex,str)
方式2：
pattern=re.compile(regex)
pattern.match(str)

方式2运行速度快的多

8,分组

（1） group

>>> match=re.match(r'hello (\w+)','hello world')
>>> match.groups()
('world',)
>>> match.group(1)
'world'
(2) embeded group


>>> match=re.search(r'(((\d{4})-\d{2})-\d{2})','2016-01-01')
>>> match.groups()
('2016-01-01', '2016-01', '2016')
>>> match.groups(1)
('2016-01-01', '2016-01', '2016')
>>> match.group(1)
'2016-01-01'
>>> match.group(2)
'2016-01'
>>> match.group(3)
'2016'
>>> 

(3) 对分组进行命名
>>> pattern='(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})'
>>> res=re.search(pattern,'2016-02-09')
>>> res.groupdict()
{'year': '2016', 'month': '02', 'day': '09'}
>>> res.group('year')
'2016'
>>> res.group('month')
'02'
>>> res.group('day')
'09'


（4） 使用sed替换用法

  用法1：
    re.sub(r'(\d{4})-(\d{2})-(\d{2})',r'\1/\2/\3','2019-09-01')
    re.sub(r'(\d{4})-(\d{2})-(\d{2})',r'\1/\2/\3','2019-09-01')
    '2019/09/01'
  用法2：
   pattern='(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})'
   
   re.sub(pattern,r'\g<year>/\g<month>/\g<day>','2019-09-18')
    
(5)附近匹配

?=regex : 从左到右匹配，用*隔开

 >>> re.sub('(?=\d{3})','*','abc123456ghk')
'abc*1*2*3*456ghk'
>>> res=re.sub('(?=\d{3})','*','abc123456ghk')
>>> list=res.split(res,'*')
>>> list=res.split('*')
>>> list
['abc', '1', '2', '3', '456ghk']
>>> list[0]
'abc'

?<=regex: 从右向左匹配

>>> re.sub('(?<=\d{3})','*','abc123456789gbvfff')
'abc123*4*5*6*7*8*9*gbvfff'



(6) \bXXX\b查找

    text = "May we stop to remember the 2,996 people that died & the more than 6000 injured on #September11"

    m = re.findall(r"\bdied|injured\b", text)

    if m :

       print(m)


['died', 'injured']
